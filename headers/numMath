//===----------------------------- -*- C++ -*- -----------------------------===//
//
// Copyright (c) 2023 Star. All Rights Reserved.
// This file is part of set-calc.
//
// set-calc is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// set-calc is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// set-calc. If not, see <https://www.gnu.org/licenses/>.
//
//===-------- headers/numMath - The declaration for math functions ---------===//
///
/// @file
/// This file declares some math functions,
/// They are: @code
///     void avgnum(std::pmr::vector<long double> &vec);
///     void minnum(std::pmr::vector<long double> &vec);
///     void midnum(std::pmr::vector<long double> &vec,
///                 const std::size_t             &sizeDividedByTwo);
///     void maxnum(std::pmr::vector<long double> &vec);
///     void rangenum(std::pmr::vector<long double> &vec);
///     void modenum(std::pmr::vector<long double> &vec);
///     void variance(std::pmr::vector<long double> &vec,
///                   const std::size_t             &sizeV);
/// @endcode
///
//===-----------------------------------------------------------------------===//

#ifndef SETCALC_HEADERS_MATH_
#define SETCALC_HEADERS_MATH_

#include "getModeNumber"
#include <algorithm>
#include <cstddef>
#include <format>
#include <iostream>
#include <map>
#include <numeric>
#include <optional>
#include <ranges>
#include <unordered_map>
#include <vector>

/// Output the average number of elements in a set
void avgnum(std::pmr::vector<long double> &vec);
/// Output the minimum number of elements in a set
void minnum(std::pmr::vector<long double> &vec);
/// Output the median number of elements in a set
void midnum(std::pmr::vector<long double> &vec,
            const std::size_t             &sizeDividedByTwo);
/// Output the maximum number of elements in a set
void maxnum(std::pmr::vector<long double> &vec);
/// Output the range number of elements in a set
void rangenum(std::pmr::vector<long double> &vec);
/// Output the mode number of elements in a set
void modenum(std::pmr::vector<long double> &vec);
/// Output the variance of the elements in a set
void variance(std::pmr::vector<long double> &vec, const std::size_t &sizeV);

#endif
